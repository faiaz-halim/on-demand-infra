# ingress.yaml.j2
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ ingress_name }}
  namespace: {{ namespace }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "{{ ssl_redirect | default('true') }}" # Default to true if ACM/SSL is used
    nginx.ingress.kubernetes.io/force-ssl-redirect: "{{ force_ssl_redirect | default('true') if ssl_redirect | default('true') == 'true' else 'false' }}"
    # If using cert-manager (alternative to ACM via TF for NLB):
    # cert-manager.io/cluster-issuer: "{{ cluster_issuer | default('letsencrypt-prod') }}"
    # If ACM ARN is directly associated with Nginx Ingress managed listeners (less common for NLB setup by Nginx Helm chart):
    {% if acm_certificate_arn %}
    # This annotation is typically for AWS Load Balancer Controller,
    # or if Nginx Ingress itself is creating ELBs/ALBs and managing certs.
    # For Nginx exposed via Service type LoadBalancer (NLB), SSL is usually on the NLB listener.
    # The Ingress just routes. If SSL termination is at NLB, this might not be needed here.
    # However, some setups might use it or similar for end-to-end or specific Nginx SSL features.
    # For now, let's assume SSL is primarily handled by the NLB, and this is for reference or specific cases.
    # A common annotation for Nginx with an NLB where SSL is on the NLB might be related to backend protocol:
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTP" # or "HTTPS" if pods have certs
    # Let's keep it simple: if acm_certificate_arn is provided, we assume it's for use by an AWS component linked to Ingress.
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "{{ acm_certificate_arn }}"
    {% endif %}
spec:
{% if tls_secret_name or (host_name and acm_certificate_arn) %} # tls_secret_name if cert-manager used, or host_name for ACM auto-discovery by some controllers
  tls:
  - hosts:
    - {{ host_name }}
    {% if tls_secret_name %}
    secretName: {{ tls_secret_name }} # Used by cert-manager or if you manually create a TLS secret
    {% endif %}
{% endif %}
  rules:
  - host: {{ host_name }}
    http:
      paths:
      - path: {{ http_path | default("/") }}
        pathType: {{ path_type | default("Prefix") }}
        backend:
          service:
            name: {{ service_name }}
            port:
              number: {{ service_port }}
